O Vite traz algumas funcionalidades como reload server para quando alterarmos algo no código

Criar projeto com Vite
npm create vite@latest

Pode escolher qual framework e Javascript ou Typescript
Dê um nome ao projeto
Entre nessa pasta
Instale as dependências
--------------------------------------------------------------
Exemplo:
npm create vite@latest
npx: instalou 1 em 1.091s
✔ Project name: … teste
✔ Select a framework: › React
✔ Select a variant: › JavaScript

Scaffolding project in /home/amauri/teste_post/teste...

Done. Now run:

  cd teste
  npm install
  npm run dev

--------------------------------------------------------------

Instalar as dependências
npm i
ou
npm install

Rodar o projeto
npm run dev
Aparecerá a página padrão com um contador

Para rodar em outra porta
No arquivo vite.config.js
Inclua abaixo de plugins
server: {
    port: 3001
}
Ficando assim
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3001
}
})


Limpando o projeto antes de começar
Remova os arquivo css e svg da pasta src e src/assets, ficando apenas App.jsx e main.jsx
Remova a importação do index.css de main.jsx
Remova a importação do useState, App.css e logo.svg de App.jsx
Remova todo o conteúdo do return e deixe assim
return (
    <h1>Hello World</h1>
)
No navegador aparecerá apenas Hello World

No index.html tem o script type="module" que é muito importante
porque o Vite utiliza dos ECMA script modules nativo dos browsers
O arquivo principal da aplicação é o main.jsx e está nesse <script>
Esse arquivo contém o getElementById('root') que é o elemento raiz da página html
que por sua vez está na <div id="root"></div> em index.html
O React cria o html, css e js da app dentro dessa div

Arquivos jsx são arquivos que contém html dentro do Javascript


Criando componentes
===================

Crie um arquivo Post.jsx dentro de src
function Post() {
    return <p>Post</p>
}
export default Post

ou

export function Post() {
    return <p>Post</p>
}
Essa forma é melhor porque garante que o nome importado é o mesmo do componente


Em App.jsx
import { Post } from './Post'
function App() {
    return <Post />
}
export default App


Precisa ter uma tag pai/principal no return
Não podemos ter várias tags sem ter uma envolvendo todas elas

Em App.jsx
import { Post } from './Post'
function App() {
    return <Post />
    return <Post />
    return <Post />
    return <Post />
}
export default App
Isso dá erro

import { Post } from './Post'
function App() {
    <div>
        return <Post />
        return <Post />
        return <Post />
        return <Post />
    </div>
}
export default App
Isso dá certo

Podemos alterar o export do App também
export function App() {
  return (
    <div>
        return <Post />
    </div>
  )
}
e na importação do App em main.jsx colocar entre {}
import { App } from './App.jsx'


Props (Propriedades)
====================

Podemos passar algumas props para os componentes como em App.jsx
export function App() {
  return (
    <div>
        <Post
            name="Amauri"
            text="Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati, molestias sequi. Explicabo voluptate a sint iusto esse et dolores dicta facere. Impedit nulla vitae dignissimos voluptates officia accusantium voluptatem itaque?"
        />
    </div>
  )
}

Digite lorem no vscode e retornará a frase acima

e acessá-las como parâmetros da function Post em Post.jsx
export function Post(props) {
    return <p>Post</post>
}
o props é um objeto que contém
props: {author: "", content: ""}

e podemos usar essas props
export function Post(props) {
    return (
        <div>
            <strong>{props.author}</strong>
            <p>{props.content}</p>
        </div>
    )
}


Podemos criar novos posts em App.jsx
export function App() {
  return (
    <div>
        <Post
            name="Amauri"
            text="Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati, molestias sequi. Explicabo voluptate a sint iusto esse et dolores dicta facere. Impedit nulla vitae dignissimos voluptates officia accusantium voluptatem itaque?"
        />
        <Post
            name="Giovani"
            text="Um post muito legal"
        />
    </div>
  )
}

Lib para trabalhar com datas
npm i date-fns












